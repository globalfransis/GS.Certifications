using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using GS.Certifications.Web.Common;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace GS.Certifications.Web.Filters;

/// <summary>
/// This filter prevents a user, whose session has been lost, from remaining authenticated in the system.
/// To achieve this, it checks for a specific entry in the session, which is created during the login. 
/// A new session automatically generated by Asp.Net will not have that, and the user will be logged out 
/// and redirected to login page.
/// </summary>
public class SessionFilter : IAsyncPageFilter
{
    public async Task OnPageHandlerExecutionAsync(PageHandlerExecutingContext context, PageHandlerExecutionDelegate next)
    {
        if (context.HttpContext.User.Identity.IsAuthenticated
            && !context.HttpContext.Session.Keys.Contains(Constants.SessionAliveFlagKey))
        {
            await context.HttpContext.SignOutAsync();
            context.HttpContext.Session.Clear();

            context.Result = new RedirectToPageResult("/Login", new { area = "Security", SessionExpired = true });
        }
        else
        {
            await next.Invoke();
        }
    }

    public async Task OnPageHandlerSelectionAsync(PageHandlerSelectedContext context)
    {
        await Task.CompletedTask;
    }
}
