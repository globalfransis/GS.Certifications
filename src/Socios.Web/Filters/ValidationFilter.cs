using GSF.Application.Common.Exceptions;
using GSF.Application.Security.Users.Exceptions;
using GSF.Domain.Extensions;
using GSFSharedResources;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Localization;

namespace Socios.Web.Filters;

public class ValidationFilter : IExceptionFilter
{
    IWebHostEnvironment _environment;
    public ValidationFilter(IWebHostEnvironment environment)
    {
        _environment = environment;
    }
    //private string concurrencyErrorMessage;

    /// <summary>Converts validation errors, generated by FluentValidation, into ModelState Errors. Handles concurrency errors, too.
    /// </summary>
    /// <param name="context">ExceptionContext to retrieve errors.</param>
    public void OnException(ExceptionContext context)
    {
        
        bool isAjaxCall = context.HttpContext.Request.Headers["x-requested-with"] == "XMLHttpRequest"
        || context.HttpContext.Request.Path.Value.Contains("/api/");

        switch (context.Exception)
        {


            case ValidationErrorException ex:

                if (isAjaxCall)
                    HandleErrorValidacionExceptionAjaxCall(context, ex);
                else
                    HandleErrorValidacionExceptionRazorPages(context, ex);
                break;

            case DbUpdateConcurrencyException ex:

                if (isAjaxCall)
                    HandleConcurrencyExceptionAjaxCall(context, ex);
                break;

            case GSFSessionExpiredException ex:

                //When its not handle by the AuthorizationGSFAttribute (that runs before this ValidationFilter)
                if (isAjaxCall)
                {
                    context.Result = new UnauthorizedObjectResult(ex);
                }
                else
                {
                    context.ExceptionHandled = true;
                    context.Result = new RedirectToPageResult("/Login", new { area = "Security", SessionExpired = true });
                }
                break;

            default:
                //This option is for critical exceptions. For any other exception that should be returned by standard message create a 'Case'
                if (isAjaxCall)
                {
                    string message;
                    if (_environment.IsDevelopment())
                        message = context.Exception.Message;
                    else
                        message = "Ocurrio un error inesperado, contactase con el administrador del sistema.";

                    var objectMessage = new
                    {
                        Errors = message,
                    };

                    var objectResult = new ObjectResult(objectMessage);
                    objectResult.StatusCode = StatusCodes.Status500InternalServerError;
                    //objectResult.StatusCode = 460; //Custom Status Code
                    context.Result = objectResult;

                    context.ExceptionHandled = true;
                }

                break;
        }
    }

    public void HandleErrorValidacionExceptionRazorPages(ExceptionContext context, ValidationErrorException ex)
    {
        foreach (var error in ex.Failures)
        {
            //context.ModelState.AddModelError(error.Key, error.Value.First());
            foreach (var message in error.Value)
            {
                context.ModelState.AddModelError(error.Key, message);
            }
        }
        context.Result = new PageResult();
    }

    public void HandleErrorValidacionExceptionAjaxCall(ExceptionContext context, ValidationErrorException ex)
    {
        var details = new ValidationProblemDetails()
        {
            Type = "https://tools.ietf.org/html/rfc7231#section-6.5.1",
            Title = "",
        };

        foreach (var err in ex.Failures)
        {
            details.Errors.Add(err.Key.ToCamelCase(), err.Value);
        }
        context.Result = new BadRequestObjectResult(details);
        context.ExceptionHandled = true;
    }

    private void HandleConcurrencyExceptionAjaxCall(ExceptionContext context, DbUpdateConcurrencyException ex)
    {
        IStringLocalizer<Shared> loc = context.HttpContext.RequestServices.GetService<IStringLocalizer<Shared>>();

        var details = new ValidationProblemDetails()
        {
            Type = "https://tools.ietf.org/html/rfc7231#section-6.5.1",
            Title = "Concurrency Exception",
        };

        string[] errors = new string[1];
        errors[0] = loc["Los datos fueron modificados por otro usuario. Intente nuevamente."];
        details.Errors.Add("DbUpdateConcurrencyException", errors);

        context.Result = new BadRequestObjectResult(details);

        context.ExceptionHandled = true;
    }
}