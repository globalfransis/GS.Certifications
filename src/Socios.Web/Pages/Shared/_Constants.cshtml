@using GS.Certifications.Domain.Commons.Enums
@using GS.Certifications.Domain.Entities.Certificaciones
@using GS.Certifications.Domain.Entities.Certificaciones.Documentos
@using GSF.Application.Common.Interfaces;
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Socios.Web.Common.Resources.Shared> SharedLocalizer

@inject IConfiguration configuration 

@{
}

<script>
    // Datos de aplicación
    const appName = "@SharedLocalizer[configuration.GetSection("Application:Name").Value]";

    // Estados de solicitud de certificación
    const SolicitudEstado = Object.freeze( 
    {
        PENDIENTE: @SolicitudCertificacionEstado.PENDIENTE,
        PRESENTADA: @SolicitudCertificacionEstado.PRESENTADA,
        APROBADA: @SolicitudCertificacionEstado.APROBADA,
        RECHAZADA: @SolicitudCertificacionEstado.RECHAZADA,
        BORRADOR: @SolicitudCertificacionEstado.BORRADOR,
        REVISION: @SolicitudCertificacionEstado.REVISION
    });

    // Estados de documento de solicitud de certificación
    const DocumentoEstado = Object.freeze( 
    {
        PENDIENTE: @DocumentoEstado.PENDIENTE,
        VALIDADO: @DocumentoEstado.VALIDADO,
        RECHAZADO: @DocumentoEstado.RECHAZADO,
        VENCIDO: @DocumentoEstado.VENCIDO,
        PRESENTADO: @DocumentoEstado.PRESENTADO
    });

    // Estados de una operación
    const OperationStatus = Object.freeze(
    {
        PROCESSING: @((int)OperationStatus.PROCESSING),
        COMPLETED: @((int)OperationStatus.COMPLETED),
        FAILED: @((int)OperationStatus.FAILED)
    });
</script>

