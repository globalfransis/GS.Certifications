@using Microsoft.Extensions.Configuration
@using GSF.Application.Common.Interfaces
@using System.Web;
@using Microsoft.Extensions.Localization
@inject IConfiguration Configuration
@inject ITargetPathResolver _targetPathResolver
@inject IStringLocalizer<Socios.Web.Common.Resources.Shared> loc

<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>@loc[HttpUtility.HtmlDecode(Configuration.GetSection("Application").GetValue(typeof(string), "Name").ToString())] - @ViewBag.Title</title>

    @* css *@
    <link rel="icon" type="image/x-icon" href="~/favicon.png" />
    <link rel="stylesheet" href="~/lib/twitter-bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/main.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />

    @if (User.Identity.IsAuthenticated && !String.IsNullOrWhiteSpace(User.FindFirst("css_theme").Value))
    {
        <link rel="stylesheet" href="~/css/themes/@String.Concat(User.FindFirst("css_theme").Value, ".css")" />
    }
</head>
<body id="layoutbody">
    <div class="top" id="spinner" style="display:none">
        <div class="loading loading--full-height"></div>
    </div>

    <div id="aiSpinnerOverlay" class="ai-global-spinner-overlay" style="display:none;">
        <div class="spinner-content">
            <div class="sparkles-icon-wrapper">
                <svg xmlns="http://www.w3.org/2000/svg" id="aiGlobalSparkleSvg" class="ai-global-sparkle-svg" viewBox="0 0 24 24">
                    <path d="M10,21.236,6.755,14.745.264,11.5,6.755,8.255,10,1.764l3.245,6.491L19.736,11.5l-6.491,3.245ZM18,21l1.5,3L21,21l3-1.5L21,18l-1.5-3L18,18l-3,1.5ZM19.333,4.667,20.5,7l1.167-2.333L24,3.5,21.667,2.333,20.5,0,19.333,2.333,17,3.5Z" />
                </svg>
            </div>
            <div id="aiGlobalSpinnerTitle" class="ai-message">@loc["Procesando Documento con IA..."]</div>
            <div id="aiGlobalSpinnerMessage" class="ai-sub-message">@loc["Analizando documento..."]</div>
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">


            @{
                if (User.Identity.IsAuthenticated)
                    @await Component.InvokeAsync("Header")
                ;
            }

            <!-- Sidebar -->
            @{
                if (User.Identity.IsAuthenticated)
                    @await Component.InvokeAsync("SideBar")
                ;
            }
            <!-- /#sidebar-wrapper -->
            <!-- Page Content -->

            <div id="pagecontent" class="col pb-5 content">

                <!-- Breadcrumb -->
                @*<div class="col-12 mt-2 mb-5">
                <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                <li class="breadcrumb-item">Home</li>
                <li class="breadcrumb-item">Seguridad</li>
                <li class="breadcrumb-item active" aria-current="page">Usuarios</li>
                </ol>
                </nav>
                </div>*@
                <!-- Breadcrumb end -->

                <div class="col-12 d-flex align-items-center">
                    @if (IsSectionDefined("BackButton"))
                    {
                        @RenderSection("BackButton", required: false)
                    }
                    else
                    {
                        <gsf-back-button></gsf-back-button>
                    }


                    @if (!string.IsNullOrWhiteSpace((string)ViewData["Title"]) && Model.ShowTitle)
                    {

                        <p class="h4 page-title">@ViewData["Title"].ToString()</p>
                    }
                </div>

                @{
                    var persistentErrorMessage = ((string)TempData["PersistentErrorMessage"]);
                }

                @if (!string.IsNullOrWhiteSpace(persistentErrorMessage))
                {
                    <div class="row text-center mt-5">
                        <div class="col">
                            <div class="alert alert-danger font-weight-bold">@persistentErrorMessage</div>
                        </div>
                    </div>
                }


                <div id="clientPersistentMessage">
                    @*Handled by journey.js*@
                </div>
                @{
                    var message = (string)TempData["PersistentMessage"];
                }
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="text-center mt-4">
                        <div class="col">
                            <div class="fw-bold alert alert-success font-weight-bold">@message</div>
                        </div>
                    </div>
                }


                <div class="row">
                    <div class="col">
                        @RenderBody()

                        <div id="layoutToast">
                        </div>

                        <div id="layoutModal" class="modal fade">
                        </div>
                    </div><!-- div col body  -->
                    <!-- ActionBar -->
                    @{
                        if (User.Identity.IsAuthenticated)
                            @await Component.InvokeAsync("ActionBar")
                        ;
                    }

                    @await Html.PartialAsync("_Footer")

                </div>

                @*<a href="#" class="secondary-menu-float d-block d-sm-block d-md-block d-lg-none d-xl-none" data-bs-toggle="modal" data-bs-target="#secondaryMenuModal">
                <i class="fa fa-plus my-float"></i>
                </a>*@
                <!-- Modal -->
                @*<div class="modal fade" id="secondaryMenuModal" tabindex="-1" aria-labelledby="secondaryMenuModal" aria-hidden="true">
                <div class="modal-dialog">
                <div class="modal-content">
                <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Secondary Menu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                <div class="list-group">
                <h6>Options</h6>
                <button type="button" class="list-group-item list-group-item-action" aria-current="true">
                Option 1
                </button>
                <button type="button" class="list-group-item list-group-item-action">Option 2</button>
                <button type="button" class="list-group-item list-group-item-action">Option 3</button>
                <div class="dropdown-divider mb-3"></div>
                <h6>Tareas</h6>
                <button type="button" class="list-group-item list-group-item-action" aria-current="true">
                Option 1
                </button>
                <button type="button" class="list-group-item list-group-item-action">Option 2</button>
                <button type="button" class="list-group-item list-group-item-action">Option 3</button>
                <button type="button" class="list-group-item list-group-item-action">Option 4</button>
                </div>
                </div>
                </div>
                </div>
                </div>*@

                <!-- cierre row layout-->
                @await Html.PartialAsync("_ScriptsPartial")
                @await Html.PartialAsync("_Constants")

            </div>

        </div>

        <!-- /#page-content-wrapper -->
    </div>

    <script>
        var _forceBack = @((ViewData["forceBack"] != null && (bool)ViewData["forceBack"] == true).ToString().ToLower());
        var _navigationKey = '@Context.Items["navigationKey"]'
        var __homeNavigationKey = '/index';
        var __homeUrl = '@_targetPathResolver.GetResolvedUri("/")'


        var viewdataName = '@ViewData["Name"]';
        var __errorMessage = '@TempData["ErrorMessage"]';
        var __alertMessage = '@TempData["AlertMessage"]';
        var __successMessage = '@TempData["SuccessMessage"]';


        var showValidationErrors = () => {
            if (__errorMessage == null || __errorMessage == "") {
                let vErrors = document.getElementsByClassName('field-validation-error')
                if (vErrors.length) {
                    __errorMessage = "Operación rechazada";
                }
            }
            if (__errorMessage == null || __errorMessage == "") {
                let vErrors = document.getElementsByClassName('validation-summary-errors')
                if (vErrors.length) {

                    __errorMessage = "Operación rechazada";
                }
            }
        }
        this.showValidationErrors();



    </script>

    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/datatables.net/jquery.dataTables.min.js"></script>
    @*<script src="~/lib/datatables.net-bs4/dataTables.bootstrap4.min.js"></script>*@
    @*<link href="~/lib/datatables.net-bs4/dataTables.bootstrap4.min.css" rel="stylesheet" />*@
    <script src="https://cdn.datatables.net/1.10.25/js/dataTables.bootstrap5.min.js" crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/plug-ins/1.13.1/sorting/datetime-moment.js" crossorigin="anonymous"></script>
    <link href="https://cdn.datatables.net/1.10.25/css/dataTables.bootstrap5.min.css" crossorigin="anonymous" rel="stylesheet" />

    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="~/lib/twitter-bootstrap/js/bootstrap.min.js" asp-append-version="true"></script>
    <script src="~/lib/font-awesome/js/all.min.js" asp-append-version="true"></script>
    <script src="~/js/navigation.js" asp-append-version="true"></script>
    <script src="~/js/journey.js" asp-append-version="true"></script>
    <script src="~/js/Generic.js" asp-append-version="true"></script>
    <script src="~/js/localStorage.js" asp-append-version="true"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js" asp-append-version="true"></script>
    <script src="~/js/notifications.js" asp-append-version="true" type="text/javascript"></script>

    <script src="~/js/menu.js" asp-append-version="true"></script>
    <script src="~/js/autocomplete.js" asp-append-version="true"></script>
    <script src="~/js/main.js" asp-append-version="true"></script>
    @RenderSection("Scripts", required: false)
    <style>


        /* Style #1 */
        .loading {
            display: flex;
            justify-content: center;
        }

        .loading--full-height {
            align-items: center;
            height: 100%;
        }

        .loading::after {
            content: "";
            width: 100px;
            height: 100px;
            border: 10px solid #dddddd;
            border-top-color: #50b5da;
            border-radius: 50%;
            transform: rotate(0.16turn);
            animation: loading 1s ease infinite;
            left: 50%;
            top: 50%;
            display: block;
            position: absolute;
            z-index: 999;
        }

        @@keyframes loading {
            /* Safari support */
            from {
                transform: rotate(0turn);
            }

            to {
                transform: rotate(1turn);
            }
        }

        #top {
            z-index: 999;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            display: none;
            position: absolute;
            background-color: #50b5da;
            color: #aaaaaa;
            opacity: .4;
            filter: alpha(opacity=30);
        }

        #layoutbody.active {
            opacity: 0.75;
            pointer-events: none;
            z-index: 999 !important;
        }


        .ai-global-spinner-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.85); /* Fondo semi-transparente */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10000 !important; /* Muy alto */
            text-align: center;
            padding: 20px;
        }

            .ai-global-spinner-overlay .spinner-content {
                /* background-color: #fff; /* Caja de contenido opcional */
                padding: 30px 40px;
                /* border-radius: 10px; */
                /* box-shadow: 0 5px 20px rgba(0,0,0,0.15); */
                max-width: 90%;
                width: auto; /* Ajustar al contenido */
                min-width: 300px; /* Un mínimo para que no se vea muy pequeño */
            }

            .ai-global-spinner-overlay .sparkles-icon-wrapper {
                margin-bottom: 1.25rem;
            }

        /* Estilos para el SVG animado global */
        .ai-global-sparkle-svg { /* Clase que le dimos al SVG */
            width: 3.5rem;
            height: 3.5rem;
            display: inline-block;
            line-height: 1;
            animation: aiGlobalSparkleAnimate 2.5s infinite ease-in-out;
        }

        @@keyframes aiGlobalSparkleAnimate {
            0% {
                transform: scale(0.9);
                opacity: 0.7;
                fill: #FFD700; /* Gold */
                filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.6));
            }

            25% {
                transform: scale(1.15);
                opacity: 1;
                fill: #00E5FF; /* Aqua/Cyan vibrante */
                filter: drop-shadow(0 0 7px rgba(0, 229, 255, 0.7));
            }

            50% {
                transform: scale(0.95);
                opacity: 0.8;
                fill: #FF00B2; /* Fucsia/Magenta vibrante */
                filter: drop-shadow(0 0 5px rgba(255, 0, 178, 0.6));
            }

            75% {
                transform: scale(1.1);
                opacity: 1;
                fill: #BF55EC; /* Lila/Púrpura medio */
                filter: drop-shadow(0 0 7px rgba(191, 85, 236, 0.7));
            }

            100% {
                transform: scale(0.9);
                opacity: 0.7;
                fill: #FFD700; /* Gold */
                filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.6));
            }
        }

        /* Estilos para los mensajes */
        .ai-global-spinner-overlay .ai-message {
            font-size: 1.25rem;
            color: #0c5460; /* Un azul oscuro/petróleo */
            margin-bottom: 0.75rem;
            font-weight: 500;
        }

        .ai-global-spinner-overlay .ai-sub-message {
            font-size: 1.0rem;
            color: #545b62; /* Un gris oscuro */
            margin-bottom: 1.75rem;
            min-height: 1.2em; /* Para evitar saltos si el texto cambia */
        }

        .ai-global-spinner-overlay .progress {
            width: 70%;
            max-width: 300px;
            height: 10px;
            margin: 0 auto;
            background-color: #e9ecef;
        }

        .ai-global-spinner-overlay .progress-bar {
            background-color: #0d8b8b;
        }
    </style>

</body>

</html>
